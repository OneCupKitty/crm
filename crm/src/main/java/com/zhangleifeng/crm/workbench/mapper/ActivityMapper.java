package com.zhangleifeng.crm.workbench.mapper;

import com.zhangleifeng.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Aug 01 11:30:23 CST 2022
     */
    int deleteByPrimaryKey(String id);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Aug 01 11:30:23 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Aug 01 11:30:23 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Aug 01 11:30:23 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Aug 01 11:30:23 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 增加市场活动
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);

    /**
     * 条件查询市场活动,某一页
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 查询符合条件的市场活动的条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id 数组,删除活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(String [] ids);

    /**
     * 跟据id 查询市场活动
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 根据id 更新市场活动
     * @param activity
     * @return
     */
    int updateActivityById(Activity activity);

    /**
     * 查询所有市场活动列表
     * @return
     */
    List<Activity> selectAllActivities();

    /**
     * 根据id 数组 ,查询市场活动
     * @param ids
     * @return
     */
    List<Activity> selectActivitiesByIds(String[] ids);

    /**
     * 添加生成的市场活动列表
     * @param activityList
     * @return
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据id 查询市场活动明细
     * @param id
     * @return
     */
    Activity selectActivityForDetail(String id);

    /**
     * 根据clueid 查询市场活动的信息
     * @param id
     * @return
     */
    List<Activity> selectActivityByClueId(String id);

    /**
     * 根据市场活动名称 和 线索id,查询没有和线索绑定的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameAndClueId(Map<String,Object> map);

    /**
     * 通过市场活动id数组,查询市场活动的信息
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByActivityIdArray(String [] ids);

    /**
     * 根据市场活动名称,和 线索id 查询,已关联的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String,Object> map);
}